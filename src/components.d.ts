/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SegmentContainer {
        "backgroundColor": string;
        "segTitle": string;
    }
    interface TcAdvantageColumn {
        "advantageText": string;
        "advantageTitle": string;
        "iconBackground": string;
        "iconSvgPath": string;
        "iconSvgViewBox": string;
        "iconSvgXmlns": string;
        "iconcolor": string;
    }
    interface TcFrameworkItem {
        "imageSrc": string;
        "techTitle": string;
    }
    interface TcGridContainer {
    }
    interface TcJobCard {
        "detailedDescription": string;
        "imageSrc": string;
        "jobTitle": string;
        "shortDescription": string;
    }
    interface TcJobListing {
        "description": string;
        "jobTitle": string;
        "tags": string;
    }
    interface TcKContainer {
    }
    interface TcOpenPositions {
        "level": string;
    }
    interface TcProject {
        "imageSrc": string;
        "projectDescription": string;
        "projectDetails": string;
        "projectTitle": string;
        "quote1": string;
        "quote2": string;
        "tags": string;
    }
    interface TcTestimonial {
        "altText": string;
        "backgroundColor": string;
        "imageOnLeft": boolean;
        "imageSrc": string;
        "name": string;
        "pro": string;
        "quote": string;
        "role": string;
    }
}
declare global {
    interface HTMLSegmentContainerElement extends Components.SegmentContainer, HTMLStencilElement {
    }
    var HTMLSegmentContainerElement: {
        prototype: HTMLSegmentContainerElement;
        new (): HTMLSegmentContainerElement;
    };
    interface HTMLTcAdvantageColumnElement extends Components.TcAdvantageColumn, HTMLStencilElement {
    }
    var HTMLTcAdvantageColumnElement: {
        prototype: HTMLTcAdvantageColumnElement;
        new (): HTMLTcAdvantageColumnElement;
    };
    interface HTMLTcFrameworkItemElement extends Components.TcFrameworkItem, HTMLStencilElement {
    }
    var HTMLTcFrameworkItemElement: {
        prototype: HTMLTcFrameworkItemElement;
        new (): HTMLTcFrameworkItemElement;
    };
    interface HTMLTcGridContainerElement extends Components.TcGridContainer, HTMLStencilElement {
    }
    var HTMLTcGridContainerElement: {
        prototype: HTMLTcGridContainerElement;
        new (): HTMLTcGridContainerElement;
    };
    interface HTMLTcJobCardElement extends Components.TcJobCard, HTMLStencilElement {
    }
    var HTMLTcJobCardElement: {
        prototype: HTMLTcJobCardElement;
        new (): HTMLTcJobCardElement;
    };
    interface HTMLTcJobListingElement extends Components.TcJobListing, HTMLStencilElement {
    }
    var HTMLTcJobListingElement: {
        prototype: HTMLTcJobListingElement;
        new (): HTMLTcJobListingElement;
    };
    interface HTMLTcKContainerElement extends Components.TcKContainer, HTMLStencilElement {
    }
    var HTMLTcKContainerElement: {
        prototype: HTMLTcKContainerElement;
        new (): HTMLTcKContainerElement;
    };
    interface HTMLTcOpenPositionsElement extends Components.TcOpenPositions, HTMLStencilElement {
    }
    var HTMLTcOpenPositionsElement: {
        prototype: HTMLTcOpenPositionsElement;
        new (): HTMLTcOpenPositionsElement;
    };
    interface HTMLTcProjectElement extends Components.TcProject, HTMLStencilElement {
    }
    var HTMLTcProjectElement: {
        prototype: HTMLTcProjectElement;
        new (): HTMLTcProjectElement;
    };
    interface HTMLTcTestimonialElement extends Components.TcTestimonial, HTMLStencilElement {
    }
    var HTMLTcTestimonialElement: {
        prototype: HTMLTcTestimonialElement;
        new (): HTMLTcTestimonialElement;
    };
    interface HTMLElementTagNameMap {
        "segment-container": HTMLSegmentContainerElement;
        "tc-advantage-column": HTMLTcAdvantageColumnElement;
        "tc-framework-item": HTMLTcFrameworkItemElement;
        "tc-grid-container": HTMLTcGridContainerElement;
        "tc-job-card": HTMLTcJobCardElement;
        "tc-job-listing": HTMLTcJobListingElement;
        "tc-k-container": HTMLTcKContainerElement;
        "tc-open-positions": HTMLTcOpenPositionsElement;
        "tc-project": HTMLTcProjectElement;
        "tc-testimonial": HTMLTcTestimonialElement;
    }
}
declare namespace LocalJSX {
    interface SegmentContainer {
        "backgroundColor"?: string;
        "segTitle"?: string;
    }
    interface TcAdvantageColumn {
        "advantageText"?: string;
        "advantageTitle"?: string;
        "iconBackground"?: string;
        "iconSvgPath"?: string;
        "iconSvgViewBox"?: string;
        "iconSvgXmlns"?: string;
        "iconcolor"?: string;
    }
    interface TcFrameworkItem {
        "imageSrc"?: string;
        "techTitle"?: string;
    }
    interface TcGridContainer {
    }
    interface TcJobCard {
        "detailedDescription"?: string;
        "imageSrc"?: string;
        "jobTitle"?: string;
        "shortDescription"?: string;
    }
    interface TcJobListing {
        "description"?: string;
        "jobTitle"?: string;
        "tags"?: string;
    }
    interface TcKContainer {
    }
    interface TcOpenPositions {
        "level"?: string;
    }
    interface TcProject {
        "imageSrc"?: string;
        "projectDescription"?: string;
        "projectDetails"?: string;
        "projectTitle"?: string;
        "quote1"?: string;
        "quote2"?: string;
        "tags"?: string;
    }
    interface TcTestimonial {
        "altText"?: string;
        "backgroundColor"?: string;
        "imageOnLeft"?: boolean;
        "imageSrc"?: string;
        "name"?: string;
        "pro"?: string;
        "quote"?: string;
        "role"?: string;
    }
    interface IntrinsicElements {
        "segment-container": SegmentContainer;
        "tc-advantage-column": TcAdvantageColumn;
        "tc-framework-item": TcFrameworkItem;
        "tc-grid-container": TcGridContainer;
        "tc-job-card": TcJobCard;
        "tc-job-listing": TcJobListing;
        "tc-k-container": TcKContainer;
        "tc-open-positions": TcOpenPositions;
        "tc-project": TcProject;
        "tc-testimonial": TcTestimonial;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "segment-container": LocalJSX.SegmentContainer & JSXBase.HTMLAttributes<HTMLSegmentContainerElement>;
            "tc-advantage-column": LocalJSX.TcAdvantageColumn & JSXBase.HTMLAttributes<HTMLTcAdvantageColumnElement>;
            "tc-framework-item": LocalJSX.TcFrameworkItem & JSXBase.HTMLAttributes<HTMLTcFrameworkItemElement>;
            "tc-grid-container": LocalJSX.TcGridContainer & JSXBase.HTMLAttributes<HTMLTcGridContainerElement>;
            "tc-job-card": LocalJSX.TcJobCard & JSXBase.HTMLAttributes<HTMLTcJobCardElement>;
            "tc-job-listing": LocalJSX.TcJobListing & JSXBase.HTMLAttributes<HTMLTcJobListingElement>;
            "tc-k-container": LocalJSX.TcKContainer & JSXBase.HTMLAttributes<HTMLTcKContainerElement>;
            "tc-open-positions": LocalJSX.TcOpenPositions & JSXBase.HTMLAttributes<HTMLTcOpenPositionsElement>;
            "tc-project": LocalJSX.TcProject & JSXBase.HTMLAttributes<HTMLTcProjectElement>;
            "tc-testimonial": LocalJSX.TcTestimonial & JSXBase.HTMLAttributes<HTMLTcTestimonialElement>;
        }
    }
}
