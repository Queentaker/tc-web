/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SegmentContainer {
        "backgroundColor": string;
        "segTitle": string;
    }
    interface TcAdvantageColumn {
        "advantageTitle": string;
        "iconBackground": string;
        "iconColor": string;
        "iconSvgPath": string;
        "iconSvgViewBox": string;
        "iconSvgXmlns": string;
        "text": string;
    }
    interface TcBulletpointList {
        "bulletpoints": "[]";
        "header": string;
    }
    interface TcCollapsible {
        "colTitle": string;
        "description": string;
        "tags": string;
    }
    interface TcGridContainer {
        "columns": number;
        "gap": string;
        "lgColumns": number;
        "mdColumns": number;
    }
    interface TcGridItem {
        "giTitle": string;
        "imageSrc": string;
        "link": string;
        "width": string;
    }
    interface TcImgQuoteCard {
        "altText": string;
        "backgroundColor": string;
        "imageOnLeft": boolean;
        "imageSrc": string;
        "name": string;
        "pro": string;
        "quote": string;
        "role": string;
    }
    interface TcJobCard {
        "detailedDescription": string;
        "imageOnLeft": boolean;
        "imageSrc": string;
        "jobTitle": string;
        "shortDescription": string;
    }
    interface TcJobListing {
        "description": string;
        "imageSrc": string;
        "jobTitle": string;
        "tags": string;
    }
    interface TcOpenPositions {
        "level": string;
    }
}
declare global {
    interface HTMLSegmentContainerElement extends Components.SegmentContainer, HTMLStencilElement {
    }
    var HTMLSegmentContainerElement: {
        prototype: HTMLSegmentContainerElement;
        new (): HTMLSegmentContainerElement;
    };
    interface HTMLTcAdvantageColumnElement extends Components.TcAdvantageColumn, HTMLStencilElement {
    }
    var HTMLTcAdvantageColumnElement: {
        prototype: HTMLTcAdvantageColumnElement;
        new (): HTMLTcAdvantageColumnElement;
    };
    interface HTMLTcBulletpointListElement extends Components.TcBulletpointList, HTMLStencilElement {
    }
    var HTMLTcBulletpointListElement: {
        prototype: HTMLTcBulletpointListElement;
        new (): HTMLTcBulletpointListElement;
    };
    interface HTMLTcCollapsibleElement extends Components.TcCollapsible, HTMLStencilElement {
    }
    var HTMLTcCollapsibleElement: {
        prototype: HTMLTcCollapsibleElement;
        new (): HTMLTcCollapsibleElement;
    };
    interface HTMLTcGridContainerElement extends Components.TcGridContainer, HTMLStencilElement {
    }
    var HTMLTcGridContainerElement: {
        prototype: HTMLTcGridContainerElement;
        new (): HTMLTcGridContainerElement;
    };
    interface HTMLTcGridItemElement extends Components.TcGridItem, HTMLStencilElement {
    }
    var HTMLTcGridItemElement: {
        prototype: HTMLTcGridItemElement;
        new (): HTMLTcGridItemElement;
    };
    interface HTMLTcImgQuoteCardElement extends Components.TcImgQuoteCard, HTMLStencilElement {
    }
    var HTMLTcImgQuoteCardElement: {
        prototype: HTMLTcImgQuoteCardElement;
        new (): HTMLTcImgQuoteCardElement;
    };
    interface HTMLTcJobCardElement extends Components.TcJobCard, HTMLStencilElement {
    }
    var HTMLTcJobCardElement: {
        prototype: HTMLTcJobCardElement;
        new (): HTMLTcJobCardElement;
    };
    interface HTMLTcJobListingElement extends Components.TcJobListing, HTMLStencilElement {
    }
    var HTMLTcJobListingElement: {
        prototype: HTMLTcJobListingElement;
        new (): HTMLTcJobListingElement;
    };
    interface HTMLTcOpenPositionsElement extends Components.TcOpenPositions, HTMLStencilElement {
    }
    var HTMLTcOpenPositionsElement: {
        prototype: HTMLTcOpenPositionsElement;
        new (): HTMLTcOpenPositionsElement;
    };
    interface HTMLElementTagNameMap {
        "segment-container": HTMLSegmentContainerElement;
        "tc-advantage-column": HTMLTcAdvantageColumnElement;
        "tc-bulletpoint-list": HTMLTcBulletpointListElement;
        "tc-collapsible": HTMLTcCollapsibleElement;
        "tc-grid-container": HTMLTcGridContainerElement;
        "tc-grid-item": HTMLTcGridItemElement;
        "tc-img-quote-card": HTMLTcImgQuoteCardElement;
        "tc-job-card": HTMLTcJobCardElement;
        "tc-job-listing": HTMLTcJobListingElement;
        "tc-open-positions": HTMLTcOpenPositionsElement;
    }
}
declare namespace LocalJSX {
    interface SegmentContainer {
        "backgroundColor"?: string;
        "segTitle"?: string;
    }
    interface TcAdvantageColumn {
        "advantageTitle"?: string;
        "iconBackground"?: string;
        "iconColor"?: string;
        "iconSvgPath"?: string;
        "iconSvgViewBox"?: string;
        "iconSvgXmlns"?: string;
        "text"?: string;
    }
    interface TcBulletpointList {
        "bulletpoints"?: "[]";
        "header"?: string;
    }
    interface TcCollapsible {
        "colTitle"?: string;
        "description"?: string;
        "tags"?: string;
    }
    interface TcGridContainer {
        "columns"?: number;
        "gap"?: string;
        "lgColumns"?: number;
        "mdColumns"?: number;
    }
    interface TcGridItem {
        "giTitle"?: string;
        "imageSrc"?: string;
        "link"?: string;
        "width"?: string;
    }
    interface TcImgQuoteCard {
        "altText"?: string;
        "backgroundColor"?: string;
        "imageOnLeft"?: boolean;
        "imageSrc"?: string;
        "name"?: string;
        "pro"?: string;
        "quote"?: string;
        "role"?: string;
    }
    interface TcJobCard {
        "detailedDescription"?: string;
        "imageOnLeft"?: boolean;
        "imageSrc"?: string;
        "jobTitle"?: string;
        "shortDescription"?: string;
    }
    interface TcJobListing {
        "description"?: string;
        "imageSrc"?: string;
        "jobTitle"?: string;
        "tags"?: string;
    }
    interface TcOpenPositions {
        "level"?: string;
    }
    interface IntrinsicElements {
        "segment-container": SegmentContainer;
        "tc-advantage-column": TcAdvantageColumn;
        "tc-bulletpoint-list": TcBulletpointList;
        "tc-collapsible": TcCollapsible;
        "tc-grid-container": TcGridContainer;
        "tc-grid-item": TcGridItem;
        "tc-img-quote-card": TcImgQuoteCard;
        "tc-job-card": TcJobCard;
        "tc-job-listing": TcJobListing;
        "tc-open-positions": TcOpenPositions;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "segment-container": LocalJSX.SegmentContainer & JSXBase.HTMLAttributes<HTMLSegmentContainerElement>;
            "tc-advantage-column": LocalJSX.TcAdvantageColumn & JSXBase.HTMLAttributes<HTMLTcAdvantageColumnElement>;
            "tc-bulletpoint-list": LocalJSX.TcBulletpointList & JSXBase.HTMLAttributes<HTMLTcBulletpointListElement>;
            "tc-collapsible": LocalJSX.TcCollapsible & JSXBase.HTMLAttributes<HTMLTcCollapsibleElement>;
            "tc-grid-container": LocalJSX.TcGridContainer & JSXBase.HTMLAttributes<HTMLTcGridContainerElement>;
            "tc-grid-item": LocalJSX.TcGridItem & JSXBase.HTMLAttributes<HTMLTcGridItemElement>;
            "tc-img-quote-card": LocalJSX.TcImgQuoteCard & JSXBase.HTMLAttributes<HTMLTcImgQuoteCardElement>;
            "tc-job-card": LocalJSX.TcJobCard & JSXBase.HTMLAttributes<HTMLTcJobCardElement>;
            "tc-job-listing": LocalJSX.TcJobListing & JSXBase.HTMLAttributes<HTMLTcJobListingElement>;
            "tc-open-positions": LocalJSX.TcOpenPositions & JSXBase.HTMLAttributes<HTMLTcOpenPositionsElement>;
        }
    }
}
